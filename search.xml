<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Fontio - The World of Fonts]]></title>
      <url>/2018/02/17/fontio/</url>
      <content type="html"><![CDATA[<h2 id="Fontio-Font-Configurator"><a href="#Fontio-Font-Configurator" class="headerlink" title="Fontio: Font Configurator"></a>Fontio: Font Configurator</h2><p>Font configurator is designed keeping extreme customizability in mind.<br>It gives you the full power to create your own font package depending on<br>your setup.</p>
<h2 id="Step-1-Drag-and-drop"><a href="#Step-1-Drag-and-drop" class="headerlink" title="Step 1: Drag and drop"></a>Step 1: Drag and drop</h2><p>You can touch and hold on the font name to drag and drop it to<br>configurator.</p>
<p><img src="https://i.imgur.com/fOTffou.gif" alt=""></p>
<h2 id="Step-2-Select-variant"><a href="#Step-2-Select-variant" class="headerlink" title="Step 2: Select variant"></a>Step 2: Select variant</h2><p>Each font has it’s own list of variants. Variants are types of fonts<br>like <strong>BOLD, ITALIC, LIGHT</strong> etc.<br>After dragging and dropping a font you need to choose which variant of<br>the font you want to package.</p>
<p><img src="https://i.imgur.com/t4hoz6H.gif" alt="">  </p>
<h2 id="Finally-PACKAGE"><a href="#Finally-PACKAGE" class="headerlink" title="Finally: PACKAGE"></a>Finally: PACKAGE</h2><p>You can access your configuration anytime you want by clicking the<br>concurrent circle icon at the top. You have to enter a font name <em>(it’s<br>your own creation be happy :winky_wink:)</em> and click on the package<br>button and choose your desired way of installation.</p>
<p><img src="https://i.imgur.com/5qrIxvM.gif" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Pymongo - Save local time]]></title>
      <url>/2018/01/25/save-naive-datetime-in-pymongo/</url>
      <content type="html"><![CDATA[<p>Spent a while with this thing and came to know that even if you convert<br><code>datetime</code> to your local timezone MongoDB converts it back to UTC while saving.</p>
<h3 id="How-to-convert-to-local-timezone"><a href="#How-to-convert-to-local-timezone" class="headerlink" title="How to convert to local timezone ?"></a>How to convert to local timezone ?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> tz</span><br><span class="line"></span><br><span class="line">utctime = datetime.now()</span><br><span class="line">localtime = utctime.replace(tzinfo=tz.gettz(<span class="string">'UTC'</span>)).astimezone(tz.gettz(<span class="string">'Asia/Kolkata'</span>))</span><br></pre></td></tr></table></figure>
<p>So, the only way that MongoDB would know that it is in the form of <strong>IST</strong> is by<br>timezone info inside <code>datetime</code> object.</p>
<h3 id="Updating-local-time-in-MongoDB"><a href="#Updating-local-time-in-MongoDB" class="headerlink" title="Updating local time in MongoDB ?"></a>Updating local time in MongoDB ?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mongodb.chat.update(</span><br><span class="line">    &#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"$set"</span>: &#123;<span class="string">'date'</span>: localtime.replace(tzinfo=<span class="keyword">None</span>)&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>By removing timezone information from the <code>datetime</code> object <strong><em>(also known as naive datetime in python)</em></strong>, you are enforcing mongo by saying - <em>This is the UTC time</em></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[StorageChooser 2.0 Overview]]></title>
      <url>/2017/12/30/storage-chooser-2.0/</url>
      <content type="html"><![CDATA[<p>With so many days of coding and perfecting each features today I’m going to showcase some of the new features of the storage-chooser library.</p>
<h2 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features!"></a>New Features!</h2><ul>
<li>Resume a session</li>
<li>Theme storage-chooser more efficiently and dynamically</li>
<li>Filter files by Parent Type</li>
<li>Ability to choose multiple files</li>
</ul>
<h3 id="Resume-a-session"><a href="#Resume-a-session" class="headerlink" title="=> Resume a session"></a>=> Resume a session</h3><p>Most of the time users <em>(if like me)</em> might forget or may choose a wrong file while using this library. And when that file is inside bazillion folders users will have to navigate again to that same folder <em>(a.k.a pissed action)</em>. In storage-chooser 2.0 you can set<br><code>builder.shouldResumeSession(true);</code><br>which will tell the library to start chooser with last interacted file path. Also the library remembers when the user cancels the chooser and then start from that path next time when this config is set.</p>
<h3 id="Theme-storage-chooser-more-efficiently-and-dynamically"><a href="#Theme-storage-chooser-more-efficiently-and-dynamically" class="headerlink" title="=> Theme storage-chooser more efficiently and dynamically"></a>=> Theme storage-chooser more efficiently and dynamically</h3><p>After 3 days of flowcharts and what not I found <em>(I think I found)</em> a better way to theme the storage-chooser more efficiently.</p>
<p>The way theming works now is by scheme. You set a color scheme to chooser which is an array <em>(int[])</em> in your xml. For example:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">name</span>=<span class="string">"paranoid_theme"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Overview --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#151515<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--  Top Header bg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#2c9633<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- header text   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#252525<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- list bg  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--  storage list name text  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#e1e1e1<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- free space text  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#2c9633<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- memory bar --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- secondary dialog colors --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#151515<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- folder tint --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#252525<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- list bg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- list text --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#151515<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- address bar tint --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>@color/chevronBgColor<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- new folder hint tint --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#2c9633<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- select button color --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#da6c6c<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- new folder layour bg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#2c9633<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- fab multiselect color --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>#151515<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!-- address bar bg --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Here I have created a color scheme called <code>paranoid_theme</code> which can be then set to chooser by writing</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StorageChooser.Theme theme = <span class="keyword">new</span> StorageChooser.Theme(getApplicationContext());</span><br><span class="line">theme.setScheme(getResources().getIntArray(R.array.paranoid_theme));</span><br><span class="line"><span class="comment">// and then passing it to builder instance</span></span><br><span class="line">builder.setTheme(theme);</span><br></pre></td></tr></table></figure>
<p>This way you can have multiple schemes of storage-chooser theme depending upon your use case. This is how paranoid_theme looks:</p>
<p><img src="https://i.imgur.com/xLs9aN5.png" alt=""></p>
<h3 id="Filter-files-by-Parent-Type"><a href="#Filter-files-by-Parent-Type" class="headerlink" title="=> Filter files by Parent Type"></a>=> Filter files by Parent Type</h3><p>File filters are good and when your app is made for a specific purpose like choosing songs to be added in a playlist you might not want the user to go into the folders where there are no songs. Now you can add filter to builder instance like this<br><code>builder.filter(StorageChooser.FileType.AUDIO);</code><br>this will filter out all folders containing audio files for you and thereby reducing some effort from user side.</p>
<p>Here are some filters available in storage-chooser. Want any other filter types to be included ? <a href="https://github.com/codekidX/storage-chooser/issues" target="_blank" rel="noopener">Open an issue</a></p>
<table>
<thead>
<tr>
<th>filter</th>
<th>extensions</th>
</tr>
</thead>
<tbody>
<tr>
<td>StorageChooser.FileType.AUDIO</td>
<td>.mp3 .ogg</td>
</tr>
<tr>
<td>StorageChooser.FileType.VIDEO</td>
<td>.mp4 .ts .mkv .avi .flv</td>
</tr>
<tr>
<td>StorageChooser.FileType.IMAGES</td>
<td>.jpg .jpeg .png .gif .tiff</td>
</tr>
<tr>
<td>StorageChooser.FileType.DOCS</td>
<td>.pdf .doc .docx .ppt .xls</td>
</tr>
</tbody>
</table>
<h3 id="Ability-to-choose-multiple-files"><a href="#Ability-to-choose-multiple-files" class="headerlink" title="=> Ability to choose multiple files"></a>=> Ability to choose multiple files</h3><p>Atlast I was able to find some time handcrafting this feature <em>(and write this doc)</em> . This was planned from the start and is available in storage-chooser 2.0. It’s already in there you don’t need to write any special code for it. Just make sure your type of chooser is of type FILE_PICKER.<br><code>builder.setType(StorageChooser.FILE_PICKER);</code></p>
<p><img src="https://media.giphy.com/media/7AWKkgm9Nozw4/giphy.gif" alt=""></p>
<h3 id="List-of-configuration-for-StorageChooser-Builder-until-now"><a href="#List-of-configuration-for-StorageChooser-Builder-until-now" class="headerlink" title="List of configuration for StorageChooser.Builder (until now)"></a>List of configuration for StorageChooser.Builder <em>(until now)</em></h3><p>You can have the following configuration of builder.</p>
<table>
<thead>
<tr>
<th>methods</th>
<th>parameters</th>
<th>compulsary?</th>
</tr>
</thead>
<tbody>
<tr>
<td>withActivity</td>
<td>Activity</td>
<td>Yes</td>
</tr>
<tr>
<td>withFragmentManager</td>
<td>FragmentManager <em>(legacy)</em></td>
<td>Yes</td>
</tr>
<tr>
<td>withMemoryBar</td>
<td>boolean</td>
<td>No</td>
</tr>
<tr>
<td>withPreference</td>
<td>SharedPreferences</td>
<td>actionSave(true)</td>
</tr>
<tr>
<td>withPredefinedPath</td>
<td>String</td>
<td>No</td>
</tr>
<tr>
<td><strong>setType</strong></td>
<td>StoragChooser.DIRECTORY_CHOOSER <strong><em>or</em></strong> StorageChooser.FILE_PICKER</td>
<td>allowCustomPath(true)</td>
</tr>
<tr>
<td>showHidden</td>
<td>boolean</td>
<td>No</td>
</tr>
<tr>
<td>setTheme</td>
<td>StorageChooser.Theme</td>
<td>No</td>
</tr>
<tr>
<td>skipOverview</td>
<td>boolean, String</td>
<td>No</td>
</tr>
<tr>
<td>skipOverview</td>
<td>boolean</td>
<td>No</td>
</tr>
<tr>
<td>withContent</td>
<td>com.codekidlabs.storagechooser.Content</td>
<td>No</td>
</tr>
<tr>
<td>filter</td>
<td>StorageChooser.FileType</td>
<td>No</td>
</tr>
<tr>
<td>shouldResumeSession</td>
<td>boolean</td>
<td>No</td>
</tr>
<tr>
<td>setHeadingTypeface</td>
<td>String, boolean</td>
<td>No</td>
</tr>
<tr>
<td>setListTypeface</td>
<td>String, boolean</td>
<td>No</td>
</tr>
<tr>
<td>disableMultiSelect</td>
<td>NONE</td>
<td>No</td>
</tr>
</tbody>
</table>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><p>Slooooooooooow. But I’m still going strong !</p>
<h3 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h3><ul>
<li>Write Tests</li>
<li>Add thumbnail feature <em>(for images and videos)</em></li>
<li>Squash bugs which will come in my way by saying <code>YOU SHALL NOT PASS !</code></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Custom Mozilla v3</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
